[
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Machine Learning Fundamentals",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\nThis is a .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Machine Learning Fundamentals",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/AutomatedML.html",
    "href": "content/01_journal/AutomatedML.html",
    "title": "Automated Machine Learning with H2O",
    "section": "",
    "text": "1 Loading libraries\n\nlibrary(h2o)\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(recipes)\nlibrary(parsnip)\nlibrary(yardstick)\n\n#> \n#> Attaching package: 'yardstick'\n\n\n#> The following object is masked from 'package:readr':\n#> \n#>     spec\n\nlibrary(tidymodels)\n\n#> ── Attaching packages ────────────────────────────────────── tidymodels 1.1.0 ──\n\n\n#> ✔ broom        1.0.4     ✔ rsample      1.1.1\n#> ✔ dials        1.2.0     ✔ tune         1.1.1\n#> ✔ infer        1.0.4     ✔ workflows    1.1.3\n#> ✔ modeldata    1.1.0     ✔ workflowsets 1.0.1\n\n\n#> ── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n#> ✖ scales::discard() masks purrr::discard()\n#> ✖ dplyr::filter()   masks stats::filter()\n#> ✖ recipes::fixed()  masks stringr::fixed()\n#> ✖ dplyr::lag()      masks stats::lag()\n#> ✖ yardstick::spec() masks readr::spec()\n#> ✖ recipes::step()   masks stats::step()\n#> • Use tidymodels_prefer() to resolve common conflicts.\n\n\n\nproduct_backorders_tbl <- read_xlsx(\"./../../assets/DataSets/product_backorders.xlsx\")\nset.seed(seed = 1113)\nsplit_obj <- rsample::initial_split(product_backorders_tbl, prop = 0.85)\ntrain_readable_tbl <- training(split_obj)\ntest_readable_tbl <- testing(split_obj)\n\n\nrecipe_obj <- recipe(went_on_backorder ~., data = train_readable_tbl) %>% \n  step_zv(all_predictors()) %>% \n  step_mutate_at(in_transit_qty, local_bo_qty, fn = as.factor) %>% \n  prep()\n\n\ntrain_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)\n\n\n2 Intializing H2O\n\nh2o.init()\n\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         18 minutes 5 seconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 6 days \n#>     H2O cluster name:           H2O_started_from_R_Mohamed_yyy113 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   1.38 GB \n#>     H2O cluster total cores:    8 \n#>     H2O cluster allowed cores:  8 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\n\n\n3 Spliting data into a training and a validation data frame\n\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n\n4 Setting target and predictors\n\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_h2o), y)\n\n\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==                                                                    |   3%\n#> 17:18:13.778: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#> 17:18:13.780: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |========                                                              |  11%\n  |                                                                            \n  |=============                                                         |  19%\n  |                                                                            \n  |==================                                                    |  25%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |===========================================                           |  61%\n  |                                                                            \n  |================================================                      |  68%\n  |                                                                            \n  |=====================================================                 |  75%\n  |                                                                            \n  |==========================================================            |  82%\n  |                                                                            \n  |===============================================================       |  90%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |======================================================================| 100%\n\n\n\ntypeof(automl_models_h2o)\n\n#> [1] \"S4\"\n\nslotNames(automl_models_h2o)\n\n#> [1] \"project_name\"   \"leader\"         \"leaderboard\"    \"event_log\"     \n#> [5] \"modeling_steps\" \"training_info\"\n\nautoml_models_h2o@leaderboard\n\n#>                                                  model_id       auc   logloss\n#> 1    StackedEnsemble_AllModels_1_AutoML_2_20230603_171813 0.9129121 0.2162742\n#> 2 StackedEnsemble_BestOfFamily_2_AutoML_2_20230603_171813 0.9118148 0.2181967\n#> 3                          GBM_1_AutoML_2_20230603_171813 0.9113482 0.2183839\n#> 4 StackedEnsemble_BestOfFamily_1_AutoML_2_20230603_171813 0.9113135 0.2163088\n#> 5                          GBM_2_AutoML_2_20230603_171813 0.9082019 0.2266387\n#> 6                          GBM_3_AutoML_2_20230603_171813 0.8978494 0.2343274\n#>       aucpr mean_per_class_error      rmse        mse\n#> 1 0.6596054            0.1928838 0.2497972 0.06239865\n#> 2 0.6570563            0.1953317 0.2508606 0.06293106\n#> 3 0.6524506            0.2039151 0.2529613 0.06398943\n#> 4 0.6524743            0.2039151 0.2519839 0.06349587\n#> 5 0.6361293            0.1665823 0.2579181 0.06652176\n#> 6 0.6262939            0.2031958 0.2621152 0.06870437\n#> \n#> [10 rows x 7 columns]\n\nautoml_models_h2o@leader\n\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: stackedensemble\n#> Model ID:  StackedEnsemble_AllModels_1_AutoML_2_20230603_171813 \n#> Model Summary for Stacked Ensemble: \n#>                                     key            value\n#> 1                     Stacking strategy cross_validation\n#> 2  Number of base models (used / total)              4/6\n#> 3      # GBM base models (used / total)              3/4\n#> 4      # DRF base models (used / total)              1/1\n#> 5      # GLM base models (used / total)              0/1\n#> 6                 Metalearner algorithm              GLM\n#> 7    Metalearner fold assignment scheme           Random\n#> 8                    Metalearner nfolds                5\n#> 9               Metalearner fold_column               NA\n#> 10   Custom metalearner hyperparameters             None\n#> \n#> \n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> MSE:  0.02256752\n#> RMSE:  0.1502249\n#> LogLoss:  0.0928187\n#> Mean Per-Class Error:  0.05861237\n#> AUC:  0.9939095\n#> AUCPR:  0.9622149\n#> Gini:  0.987819\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error        Rate\n#> No     8723  106 0.012006   =106/8829\n#> Yes     125 1063 0.105219   =125/1188\n#> Totals 8848 1169 0.023061  =231/10017\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.443874    0.901994 167\n#> 2                       max f2  0.290264    0.916734 207\n#> 3                 max f0point5  0.586121    0.921875 131\n#> 4                 max accuracy  0.443874    0.976939 167\n#> 5                max precision  0.999895    1.000000   0\n#> 6                   max recall  0.055674    1.000000 316\n#> 7              max specificity  0.999895    1.000000   0\n#> 8             max absolute_mcc  0.443874    0.888964 167\n#> 9   max min_per_class_accuracy  0.262725    0.960438 215\n#> 10 max mean_per_class_accuracy  0.253941    0.960722 218\n#> 11                     max tns  0.999895 8829.000000   0\n#> 12                     max fns  0.999895 1183.000000   0\n#> 13                     max fps  0.000141 8829.000000 399\n#> 14                     max tps  0.055674 1188.000000 316\n#> 15                     max tnr  0.999895    1.000000   0\n#> 16                     max fnr  0.999895    0.995791   0\n#> 17                     max fpr  0.000141    1.000000 399\n#> 18                     max tpr  0.055674    1.000000 316\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> MSE:  0.05636438\n#> RMSE:  0.2374118\n#> LogLoss:  0.1939746\n#> Mean Per-Class Error:  0.1600841\n#> AUC:  0.932599\n#> AUCPR:  0.692712\n#> Gini:  0.8651981\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     1986 118 0.056084  =118/2104\n#> Yes      75 209 0.264085    =75/284\n#> Totals 2061 327 0.080821  =193/2388\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.307302    0.684124 182\n#> 2                       max f2  0.179628    0.743113 228\n#> 3                 max f0point5  0.568220    0.709325 108\n#> 4                 max accuracy  0.568220    0.925042 108\n#> 5                max precision  0.984220    1.000000   0\n#> 6                   max recall  0.001627    1.000000 395\n#> 7              max specificity  0.984220    1.000000   0\n#> 8             max absolute_mcc  0.307302    0.640134 182\n#> 9   max min_per_class_accuracy  0.120199    0.860741 260\n#> 10 max mean_per_class_accuracy  0.094704    0.868058 280\n#> 11                     max tns  0.984220 2104.000000   0\n#> 12                     max fns  0.984220  282.000000   0\n#> 13                     max fps  0.000080 2104.000000 399\n#> 14                     max tps  0.001627  284.000000 395\n#> 15                     max tnr  0.984220    1.000000   0\n#> 16                     max fnr  0.984220    0.992958   0\n#> 17                     max fpr  0.000080    1.000000 399\n#> 18                     max tpr  0.001627    1.000000 395\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.05990554\n#> RMSE:  0.2447561\n#> LogLoss:  0.2022788\n#> Mean Per-Class Error:  0.1882843\n#> AUC:  0.9276281\n#> AUCPR:  0.6674549\n#> Gini:  0.8552561\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>           No  Yes    Error         Rate\n#> No     11472  697 0.057277   =697/12169\n#> Yes      523 1115 0.319292    =523/1638\n#> Totals 11995 1812 0.088361  =1220/13807\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold        value idx\n#> 1                       max f1  0.306886     0.646377 202\n#> 2                       max f2  0.171424     0.717570 255\n#> 3                 max f0point5  0.521759     0.675008 133\n#> 4                 max accuracy  0.521759     0.919823 133\n#> 5                max precision  0.999941     1.000000   0\n#> 6                   max recall  0.000093     1.000000 399\n#> 7              max specificity  0.999941     1.000000   0\n#> 8             max absolute_mcc  0.306886     0.597027 202\n#> 9   max min_per_class_accuracy  0.116405     0.851648 286\n#> 10 max mean_per_class_accuracy  0.118888     0.851795 284\n#> 11                     max tns  0.999941 12169.000000   0\n#> 12                     max fns  0.999941  1636.000000   0\n#> 13                     max fps  0.000093 12169.000000 399\n#> 14                     max tps  0.000093  1638.000000 399\n#> 15                     max tnr  0.999941     1.000000   0\n#> 16                     max fnr  0.999941     0.998779   0\n#> 17                     max fpr  0.000093     1.000000 399\n#> 18                     max tpr  0.000093     1.000000 399\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#> accuracy    0.912110  0.010254   0.924431   0.896320   0.915193   0.914527\n#> auc         0.927906  0.006218   0.930508   0.921310   0.936010   0.921961\n#> err         0.087890  0.010254   0.075569   0.103680   0.084807   0.085473\n#> err_count 243.000000 31.851217 206.000000 293.000000 235.000000 233.000000\n#> f0point5    0.631683  0.037241   0.664911   0.568570   0.640703   0.651090\n#>           cv_5_valid\n#> accuracy    0.910080\n#> auc         0.929740\n#> err         0.089920\n#> err_count 248.000000\n#> f0point5    0.633142\n#> \n#> ---\n#>                          mean        sd  cv_1_valid  cv_2_valid  cv_3_valid\n#> precision            0.619081  0.049294    0.666667    0.541860    0.614458\n#> r2                   0.427296  0.032053    0.443608    0.377120    0.457528\n#> recall               0.696671  0.056097    0.657980    0.708207    0.772727\n#> residual_deviance 1116.371300 62.933964 1039.493400 1194.839500 1068.809300\n#> rmse                 0.244590  0.007440    0.235804    0.253126    0.238557\n#> specificity          0.941084  0.015262    0.958247    0.921105    0.934453\n#>                    cv_4_valid  cv_5_valid\n#> precision            0.657233    0.615190\n#> r2                   0.414876    0.443345\n#> recall               0.627628    0.716814\n#> residual_deviance 1154.463900 1124.250600\n#> rmse                 0.250491    0.244972\n#> specificity          0.954450    0.937164\n\n\n\nh2o.init()\n\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         6 minutes 20 seconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 6 days \n#>     H2O cluster name:           H2O_started_from_R_Mohamed_ewp216 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   1.15 GB \n#>     H2O cluster total cores:    8 \n#>     H2O cluster allowed cores:  8 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\nstacked_ensemble_h2o <- h2o.loadModel(\"./../../assets/Models/GBM_1_AutoML_6_20230602_132940\")\n\n\nh2o.init()\n\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         6 minutes 20 seconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 6 days \n#>     H2O cluster name:           H2O_started_from_R_Mohamed_ewp216 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   1.15 GB \n#>     H2O cluster total cores:    8 \n#>     H2O cluster allowed cores:  8 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\npredictions <- h2o.predict(stacked_ensemble_h2o, newdata = as.h2o(test_tbl))\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(predictions)\n\n#> [1] \"environment\"\n\npredictions_tbl <- predictions %>% as_tibble()\n\npredictions_tbl"
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html",
    "href": "content/01_journal/Chapter_1_Challenge.html",
    "title": "Machine Learning Fundamentals",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Machine Learning Fundamentals",
    "section": "\n5.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\n#> Rows: 1,225,765\n#> Columns: 8\n#> $ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#> $ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#> $ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#> $ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#> $ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#> $ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#> $ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#> $ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n\n# Apply your data transformation skills!\n\nsp_500_daily_returns_tbl <- sp_500_prices_tbl %>%\n  select(symbol, date, adjusted) %>%\n  filter(year(date) >= 2018) %>%\n  group_by(symbol) %>%\n  mutate(lag_adjusted = lag(adjusted, 1)) %>%\n  na.omit() %>%\n  mutate(difference = adjusted - lag_adjusted,\n         pct_return = difference / lag_adjusted) %>%\n  select(symbol, date, pct_return)\n\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Machine Learning Fundamentals",
    "section": "\n5.2 Step 2 - Convert to User-Item Format",
    "text": "5.2 Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"../../assets/DataSets/sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n\n# Convert to User-Item Format\n\nstock_date_matrix_tbl <- sp_500_daily_returns_tbl %>%\n  spread(date, pct_return, fill = 0)\n\nstock_date_matrix_tbl\n\n\n\n  \n\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Machine Learning Fundamentals",
    "section": "\n5.3 Step 3 - Perform K-Means Clustering",
    "text": "5.3 Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"../../assets/DataSets/stock_date_matrix_tbl.rds\")\nstock_date_matrix_tbl\n\n\n\n  \n\n\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\n\nPerform kmeans() with centers = 4 and nstart = 20\n\nSave the result as kmeans_obj\n\n\n\n# Create kmeans_obj for 4 centers\nstock_date_matrix_numeric <- stock_date_matrix_tbl %>%\n  select(-symbol)\n\n# Perform k-means clustering\nkmeans_obj <- kmeans(stock_date_matrix_numeric, centers = 4, nstart = 20)\n\nkmeans_obj\n\n#> K-means clustering with 4 clusters of sizes 71, 30, 84, 317\n#> \n#> Cluster means:\n#>     2018-01-03   2018-01-04   2018-01-05  2018-01-08    2018-01-09\n#> 1  0.014025528  0.004891946 0.0092884855 0.008080790 -0.0003389287\n#> 2  0.014549433  0.011343742 0.0006474687 0.005827603 -0.0061031977\n#> 3 -0.003333954 -0.006912672 0.0012340690 0.005406745 -0.0089961936\n#> 4  0.005217181  0.004542594 0.0065882996 0.001682355  0.0035926461\n#>      2018-01-10   2018-01-11   2018-01-12   2018-01-16  2018-01-17   2018-01-18\n#> 1 -0.0020594364  0.009308274  0.009571419 -0.008449825 0.015404285  0.001998036\n#> 2  0.0012472656  0.023712257  0.010296386 -0.014205000 0.008879761 -0.009114860\n#> 3 -0.0120427739 -0.004826786 -0.005236483  0.001309974 0.007494267 -0.006708276\n#> 4 -0.0003417889  0.011272867  0.008286783 -0.007601889 0.007489971 -0.001424046\n#>    2018-01-19  2018-01-22    2018-01-23   2018-01-24    2018-01-25   2018-01-26\n#> 1 0.006715878 0.009735809  0.0093980814 -0.007636793 -4.868228e-03 0.0166806037\n#> 2 0.001324402 0.024772066 -0.0005949105 -0.006334400 -1.029610e-02 0.0060671176\n#> 3 0.004566404 0.006985181  0.0080806520 -0.003852982  5.819039e-03 0.0008990918\n#> 4 0.007923882 0.004611634  0.0009158796  0.002736219  6.261335e-05 0.0112167041\n#>     2018-01-29   2018-01-30   2018-01-31    2018-02-01  2018-02-02  2018-02-05\n#> 1 -0.005021227 -0.009723839  0.005783896  0.0021775377 -0.02295550 -0.03846852\n#> 2 -0.015217440 -0.021314151  0.001732506  0.0088676780 -0.03741749 -0.03711698\n#> 3 -0.011666174 -0.003053078  0.010838715 -0.0147069869 -0.01321817 -0.02624758\n#> 4 -0.006083350 -0.011773883 -0.003893409 -0.0002198492 -0.01945987 -0.03929605\n#>     2018-02-06    2018-02-07  2018-02-08  2018-02-09  2018-02-12   2018-02-13\n#> 1  0.025070219 -0.0074124405 -0.04115078  0.02162704 0.018492458  0.008702354\n#> 2  0.013342351 -0.0190853955 -0.03955006 -0.00291801 0.022509484 -0.006038450\n#> 3 -0.000769148 -0.0052130982 -0.02013127  0.01909034 0.005043885  0.003804489\n#> 4  0.014327389  0.0006988956 -0.03645141  0.01201566 0.012262163  0.002250963\n#>     2018-02-14   2018-02-15    2018-02-16    2018-02-20   2018-02-21\n#> 1  0.024552532  0.016512878 -0.0064207255  0.0060618583 -0.004441781\n#> 2  0.028709277 -0.005064078 -0.0050865513  0.0004252287 -0.016731442\n#> 3 -0.004153567  0.016542153  0.0050883535 -0.0117393604 -0.016373701\n#> 4  0.017405799  0.009018172  0.0009879948 -0.0076134581 -0.002297952\n#>     2018-02-22 2018-02-23   2018-02-26   2018-02-27   2018-02-28   2018-03-01\n#> 1 -0.002997867 0.02195730 1.220083e-02 -0.009308126 -0.005461278 -0.014143419\n#> 2  0.009769590 0.02115968 9.924278e-05 -0.014163508 -0.023712904  0.001114025\n#> 3  0.007334973 0.01800925 2.523189e-03 -0.016890593 -0.004953530 -0.000381493\n#> 4 -0.001782200 0.01341795 8.558352e-03 -0.013163471 -0.012030574 -0.013488875\n#>    2018-03-02 2018-03-05    2018-03-06   2018-03-07  2018-03-08  2018-03-09\n#> 1 0.021342169 0.01379969  0.0087369561  0.007337585 0.008156522 0.017801101\n#> 2 0.007737213 0.01108851  0.0003806278 -0.007205835 0.001223280 0.021309965\n#> 3 0.001200669 0.01370457 -0.0019166661 -0.002145171 0.007270226 0.004711574\n#> 4 0.005346057 0.01038346  0.0061748492 -0.001323156 0.001313594 0.017891556\n#>      2018-03-12   2018-03-13    2018-03-14   2018-03-15   2018-03-16\n#> 1  0.0027135945 -0.012076285  0.0002114269 -0.002123033 0.0008341013\n#> 2 -0.0005388962 -0.008199908 -0.0017622280 -0.012297035 0.0129985324\n#> 3  0.0031507710  0.001106390  0.0009870808 -0.002700715 0.0054389622\n#> 4 -0.0035181932 -0.003675462 -0.0084294900 -0.001428887 0.0043333233\n#>     2018-03-19   2018-03-20    2018-03-21   2018-03-22   2018-03-23 2018-03-26\n#> 1 -0.017248805  0.004318024 -0.0017923612 -0.026251915 -0.025754376 0.03407693\n#> 2 -0.017670238  0.013784848  0.0337207010 -0.021459951 -0.007163383 0.01896047\n#> 3 -0.007648673 -0.003879733 -0.0090580220 -0.003464591 -0.013739589 0.01267397\n#> 4 -0.010398300  0.000171361  0.0004388795 -0.027250330 -0.019522841 0.02449549\n#>     2018-03-27    2018-03-28  2018-03-29  2018-04-02  2018-04-03  2018-04-04\n#> 1 -0.032635868 -0.0121534871 0.018762622 -0.02940422 0.012355715 0.015777681\n#> 2 -0.013465892 -0.0233216532 0.023735936 -0.02377674 0.019605101 0.001227871\n#> 3  0.007715361  0.0112983042 0.004369175 -0.01422130 0.007764893 0.010279533\n#> 4 -0.013135617 -0.0004245702 0.013363731 -0.02238548 0.012621133 0.012434839\n#>    2018-04-05   2018-04-06    2018-04-09   2018-04-10    2018-04-11\n#> 1 0.001453854 -0.029807187  0.0072958976  0.025353351 -0.0056141513\n#> 2 0.019447924 -0.022406930  0.0025547209  0.038827519  0.0130939406\n#> 3 0.002828578 -0.007734639 -0.0001039607 -0.001881378 -0.0007348127\n#> 4 0.007176211 -0.023302068  0.0013397648  0.015147638 -0.0067400406\n#>     2018-04-12   2018-04-13  2018-04-16  2018-04-17    2018-04-18   2018-04-19\n#> 1  0.015962569 -0.007832302 0.004860507 0.022161608  0.0002988631 -0.018124119\n#> 2  0.001740217  0.013155802 0.008616509 0.006042663  0.0206900471  0.001786194\n#> 3 -0.010752601  0.005563910 0.008682951 0.007863409 -0.0046798570 -0.013599108\n#> 4  0.008179894 -0.005095188 0.011016656 0.006195900  0.0032189057 -0.003267487\n#>     2018-04-20   2018-04-23  2018-04-24    2018-04-25  2018-04-26   2018-04-27\n#> 1 -0.010631547 -0.003682519 -0.01618772 -0.0050286856 0.020824552 -0.004572574\n#> 2 -0.003468391  0.006591688 -0.01599992  0.0059983491 0.011457675 -0.009243902\n#> 3 -0.012187591  0.001157400  0.00221505  0.0002285739 0.010261824  0.011958287\n#> 4 -0.005666901  0.002505648 -0.01123779  0.0039772566 0.003569482  0.003206567\n#>      2018-04-30    2018-05-01   2018-05-02   2018-05-03   2018-05-04\n#> 1 -4.215671e-03  0.0119120995 -0.003166279  0.004031093 0.0152252115\n#> 2  5.650547e-05 -0.0050385450  0.008551843 -0.003354957 0.0002403534\n#> 3 -5.828280e-03  0.0007776130 -0.009884618  0.001865179 0.0115802919\n#> 4 -1.188822e-02 -0.0005850741 -0.010327390 -0.005367388 0.0118618730\n#>      2018-05-07    2018-05-08  2018-05-09  2018-05-10   2018-05-11\n#> 1  0.0107081957  0.0042713777 0.018287598 0.012255246 -0.004284660\n#> 2 -0.0006381188  0.0103725962 0.019005395 0.003092002 -0.001898366\n#> 3 -0.0003423209 -0.0117845845 0.002356665 0.008776411 -0.001332108\n#> 4  0.0006844511  0.0007354292 0.006015187 0.008198444  0.003294055\n#>      2018-05-14   2018-05-15   2018-05-16   2018-05-17    2018-05-18\n#> 1  0.0016992322 -0.004501408  0.008611112 -0.004584975 -0.0022359815\n#> 2  0.0057983409  0.004290063  0.008291791  0.020700579 -0.0059074763\n#> 3 -0.0055922557 -0.011670012 -0.002364305 -0.004893340 -0.0039987220\n#> 4  0.0005690565 -0.003929441  0.006577711  0.001955032 -0.0005493316\n#>    2018-05-21   2018-05-22    2018-05-23    2018-05-24    2018-05-25\n#> 1 0.005922644 -0.003192814  0.0057628973  1.489904e-03  0.0006639455\n#> 2 0.008283126 -0.013478278 -0.0044105608 -1.261852e-02 -0.0266239832\n#> 3 0.005779365  0.002482762  0.0085556910  1.298424e-03  0.0047986326\n#> 4 0.005961593 -0.004840369  0.0006489749  8.611148e-05 -0.0012343964\n#>     2018-05-29  2018-05-30   2018-05-31   2018-06-01   2018-06-04   2018-06-05\n#> 1 -0.006059243 0.009546631 -0.001903148  0.022277656  0.003563116  0.007483896\n#> 2 -0.001696881 0.028669361 -0.012173706  0.002155198 -0.012253263 -0.002154042\n#> 3  0.001238291 0.011695739 -0.007053274 -0.003547776  0.003162351 -0.005049502\n#> 4 -0.015959552 0.012555582 -0.010942939  0.010095531  0.005981400  0.003198089\n#>     2018-06-06   2018-06-07   2018-06-08  2018-06-11   2018-06-12    2018-06-13\n#> 1  0.008494834 -0.013241385  0.004352640 0.002487955  0.008414511  0.0006958373\n#> 2  0.003809198  0.016374668 -0.004469895 0.005602012 -0.005129724 -0.0031941768\n#> 3 -0.005781605  0.002795166  0.005472490 0.001419442  0.008011873 -0.0102443629\n#> 4  0.011968862  0.001149033  0.005784347 0.001753974  0.001399618 -0.0055633906\n#>      2018-06-14   2018-06-15    2018-06-18    2018-06-19  2018-06-20\n#> 1  0.0095731668 -0.001900661  0.0009221515 -0.0088464161 0.006518084\n#> 2 -0.0051560680 -0.022707272  0.0173805699  0.0006035218 0.010461839\n#> 3  0.0089727967  0.005189750 -0.0037548361  0.0055750955 0.004292090\n#> 4  0.0009142176  0.001952892 -0.0026534461 -0.0061898455 0.001076239\n#>     2018-06-21   2018-06-22   2018-06-25   2018-06-26   2018-06-27   2018-06-28\n#> 1 -0.010378518 -0.007791614 -0.025003868  0.003632608 -0.020827173  0.010604506\n#> 2 -0.022917019  0.024278987 -0.026779988  0.017510326  0.015372888 -0.003154605\n#> 3  0.003094840  0.008221106  0.009402708  0.000226482 -0.001854346  0.007254731\n#> 4 -0.005383937  0.001021374 -0.011979354 -0.001118698 -0.010185976  0.002804796\n#>      2018-06-29   2018-07-02   2018-07-03   2018-07-05  2018-07-06  2018-07-09\n#> 1  3.736572e-03  0.007468319 -0.011619902  0.013982441 0.012671282  0.00729805\n#> 2  6.801777e-03 -0.016776871  0.009084328 -0.001488715 0.013008260  0.01913839\n#> 3  6.340609e-04 -0.002681042  0.004025346  0.012383700 0.005028909 -0.01604752\n#> 4 -6.855821e-05  0.001471821 -0.001898671  0.006614258 0.006908309  0.01402647\n#>    2018-07-10   2018-07-11   2018-07-12    2018-07-13   2018-07-16   2018-07-17\n#> 1 0.003275802 -0.008306789 1.727150e-02 -0.0023338092 -0.002482895  0.008792052\n#> 2 0.003473632 -0.024131440 7.366942e-05  0.0050874219 -0.015230587 -0.001992870\n#> 3 0.006173772  0.002633196 7.831687e-04  0.0004614193 -0.004724125 -0.001728087\n#> 4 0.001312620 -0.009738650 4.563560e-03  0.0012950176 -0.001679823  0.004588254\n#>     2018-07-18   2018-07-19   2018-07-20   2018-07-23    2018-07-24  2018-07-25\n#> 1  0.002761209 -0.004980070 -0.004154766  0.002027684 -0.0080874714 0.016187298\n#> 2  0.001663189 -0.001796304 -0.003616946 -0.003431901  0.0104494824 0.008122618\n#> 3 -0.007769495  0.008153929 -0.005246509 -0.004892180 -0.0005005501 0.007607577\n#> 4  0.005521811 -0.001518489 -0.002652620  0.001778067 -0.0004441636 0.007192060\n#>      2018-07-26   2018-07-27   2018-07-30   2018-07-31   2018-08-01\n#> 1 -0.0006751857 -0.020919476 -0.021618702  0.002895817 -0.002711583\n#> 2  0.0131985204  0.001280992  0.012986403 -0.002268616 -0.015730558\n#> 3  0.0079688330 -0.005027542 -0.002331982  0.012574433 -0.002755748\n#> 4  0.0029787150 -0.003446809 -0.003156086  0.008038429 -0.007249964\n#>     2018-08-02    2018-08-03   2018-08-06   2018-08-07    2018-08-08\n#> 1  0.014229673 -0.0002601396 0.0082356891  0.003361766  0.0003471306\n#> 2 -0.002134323 -0.0073460616 0.0052397976  0.003959465 -0.0085479395\n#> 3  0.004132915  0.0134441240 0.0002851608 -0.003699128 -0.0047101273\n#> 4  0.002993146  0.0051696868 0.0014640732  0.003157818 -0.0006984346\n#>      2018-08-09   2018-08-10    2018-08-13  2018-08-14   2018-08-15  2018-08-16\n#> 1 -0.0008920641 -0.009182561 -0.0022671805 0.006780214 -0.015767129 0.004438533\n#> 2 -0.0108872145  0.007638768 -0.0144547914 0.004542780 -0.042438317 0.006339482\n#> 3  0.0015381073 -0.005940741  0.0008234634 0.004398117  0.008029299 0.009135530\n#> 4 -0.0007957794 -0.008728654 -0.0054871905 0.010200628 -0.006691091 0.008967913\n#>     2018-08-17   2018-08-20   2018-08-21   2018-08-22   2018-08-23  2018-08-24\n#> 1 -0.001760454 4.049175e-03  0.008199431  0.006730186  0.001981029 0.015124691\n#> 2  0.003224037 8.421130e-03  0.008349307  0.013378383 -0.005292100 0.008073458\n#> 3  0.007732354 2.692069e-07 -0.009589298 -0.006575943 -0.001255369 0.004500810\n#> 4  0.006126832 5.942634e-03  0.005122876 -0.003894045 -0.003921203 0.003449513\n#>     2018-08-27    2018-08-28  2018-08-29   2018-08-30    2018-08-31\n#> 1  0.009845194  3.794339e-03 0.007306630 -0.006688627  0.0006588377\n#> 2  0.009180901 -5.525657e-03 0.007257279 -0.002890487 -0.0073978491\n#> 3 -0.002951911  1.332308e-03 0.002524474 -0.002927028  0.0011652746\n#> 4  0.007595955  4.536910e-06 0.003219045 -0.007957643  0.0014553869\n#>      2018-09-04   2018-09-05   2018-09-06   2018-09-07   2018-09-10\n#> 1 -0.0009675634 -0.018543501 -0.011209654 -0.004386366 0.0087879660\n#> 2 -0.0073232978 -0.004506993 -0.019382860 -0.004880020 0.0006737391\n#> 3 -0.0024738521  0.010518901  0.005232278 -0.009005451 0.0056867858\n#> 4 -0.0012439741  0.002183078 -0.000759536 -0.001954284 0.0029803154\n#>      2018-09-11   2018-09-12    2018-09-13   2018-09-14    2018-09-17\n#> 1  0.0018295441 -0.002137449  6.462456e-03  0.001758224 -0.0163136879\n#> 2  0.0122762856  0.009381701 -2.306182e-06  0.004538664  0.0006103131\n#> 3 -0.0019538731  0.003579706  4.775531e-03 -0.005895538  0.0034210890\n#> 4  0.0005049789  0.001161493  4.018751e-03  0.003053672 -0.0031778985\n#>     2018-09-18   2018-09-19   2018-09-20    2018-09-21   2018-09-24\n#> 1  0.010072334 -0.002499493  0.012692587 -0.0003286405  0.006489045\n#> 2  0.011631923  0.002892712 -0.004188770  0.0082752213  0.013828416\n#> 3 -0.005822705 -0.012892316  0.006698837  0.0026245042 -0.014558807\n#> 4  0.005551467  0.004069505  0.006322862  0.0003726642 -0.010072955\n#>      2018-09-25   2018-09-26    2018-09-27    2018-09-28   2018-10-01\n#> 1 -0.0008218263 -0.002833221  0.0055217433  0.0020502699 -0.004922243\n#> 2  0.0079921453 -0.009821787 -0.0002961086  0.0005533699  0.013778724\n#> 3 -0.0056531970 -0.008520217  0.0010554973  0.0117954826 -0.004743913\n#> 4 -0.0034740979 -0.002645426 -0.0009807794 -0.0007368244  0.001618323\n#>      2018-10-02   2018-10-03    2018-10-04   2018-10-05   2018-10-08\n#> 1 -0.0096354843  0.003528746 -0.0233264347 -0.017356286 -0.016146227\n#> 2 -0.0008793832  0.013208412 -0.0075673719 -0.002222662 -0.004422415\n#> 3  0.0063449319 -0.010963752  0.0005911404  0.007115132  0.011777449\n#> 4 -0.0021978236  0.001595167 -0.0056339596 -0.005892240  0.002315831\n#>     2018-10-09  2018-10-10  2018-10-11   2018-10-12    2018-10-15 2018-10-16\n#> 1 -0.002245737 -0.04697040 -0.01005558 0.0285292180 -0.0109009681 0.03496553\n#> 2  0.011660485 -0.04102685 -0.03066850 0.0059181717 -0.0069465232 0.01198762\n#> 3  0.001382168 -0.01068745 -0.02451301 0.0009265891  0.0063396100 0.01495123\n#> 4 -0.008888514 -0.02905836 -0.02220585 0.0079626327  0.0003925018 0.01900308\n#>      2018-10-17    2018-10-18   2018-10-19   2018-10-22   2018-10-23\n#> 1 -0.0001182299 -0.0250782664 -0.012541599  0.003844884 -0.003859615\n#> 2 -0.0121314041 -0.0110406026 -0.013063143 -0.010377735 -0.029278040\n#> 3 -0.0014392965  0.0003157027  0.014528266 -0.009878428  0.002693487\n#> 4 -0.0022031050 -0.0143254165 -0.004171677 -0.006903643 -0.006763992\n#>    2018-10-24   2018-10-25   2018-10-26   2018-10-29 2018-10-30   2018-10-31\n#> 1 -0.05208563  0.028991360 -0.023718562 -0.018802822 0.03454404  0.021504480\n#> 2 -0.04585749  0.015249528 -0.009554609 -0.024947273 0.02341653  0.006087733\n#> 3  0.01353611 -0.003340079 -0.020372884  0.014181789 0.01125114 -0.011297427\n#> 4 -0.03132646  0.015441294 -0.012819263  0.001596918 0.01998755  0.008027797\n#>    2018-11-01   2018-11-02   2018-11-05  2018-11-06  2018-11-07    2018-11-08\n#> 1 0.032081398 -0.003883827 -0.005924196 0.005474840 0.027114895 -0.0034784146\n#> 2 0.010308997 -0.009730453  0.018923407 0.002004953 0.022724471 -0.0277091571\n#> 3 0.003747117 -0.009108626  0.013772235 0.008152953 0.008792495  0.0004581358\n#> 4 0.015634660 -0.001293155  0.006938079 0.007426739 0.014704492  0.0004365969\n#>     2018-11-09   2018-11-12    2018-11-13   2018-11-14   2018-11-15\n#> 1 -0.024619687 -0.033687808  0.0041571717 -0.005272713  0.023355178\n#> 2 -0.004971914 -0.029063167 -0.0251968257  0.003142088  0.020515330\n#> 3  0.005367340  0.001904854  0.0001916946 -0.004133400 -0.004406745\n#> 4 -0.008675371 -0.015211256  0.0008174817 -0.007268626  0.008872325\n#>     2018-11-16   2018-11-19   2018-11-20   2018-11-21    2018-11-23 2018-11-26\n#> 1 -0.005298491 -0.044615610 -0.007829112  0.012297653 -2.928696e-03 0.02792190\n#> 2  0.007680349 -0.006087903 -0.040522927  0.018658251 -3.653804e-02 0.02157185\n#> 3  0.010063612  0.001588685 -0.008086658 -0.006933761 -7.387090e-06 0.00222745\n#> 4  0.002216731 -0.012261967 -0.018868549  0.007797251 -1.868033e-03 0.01391096\n#>     2018-11-27  2018-11-28    2018-11-29   2018-11-30  2018-12-03   2018-12-04\n#> 1  0.000669214 0.032255508 -0.0073804570  0.008241973 0.021707438 -0.044736643\n#> 2 -0.006230058 0.016374453  0.0053696702 -0.006236157 0.026350978 -0.035131989\n#> 3  0.005847793 0.002822177  0.0002154275  0.011292338 0.003797532 -0.008022436\n#> 4 -0.001218930 0.020257793 -0.0037995937  0.005229962 0.008915859 -0.034976107\n#>     2018-12-06   2018-12-07   2018-12-10   2018-12-11  2018-12-12   2018-12-13\n#> 1  0.008023883 -0.037844459  0.009075633  0.001617522  0.01094937 -0.009546741\n#> 2 -0.025829610 -0.007277311 -0.022566657 -0.003490909  0.01204804 -0.002388297\n#> 3  0.009630455 -0.007000921 -0.000701633  0.004753714 -0.00950557  0.008867633\n#> 4 -0.006218295 -0.023407900 -0.003215619 -0.003893997  0.00769762 -0.008218803\n#>     2018-12-14  2018-12-17   2018-12-18   2018-12-19   2018-12-20  2018-12-21\n#> 1 -0.020016222 -0.02540093  0.010933420 -0.029032982 -0.017370866 -0.03004544\n#> 2 -0.028984553 -0.01903142 -0.022103904 -0.013217782 -0.028551975 -0.01564321\n#> 3 -0.006215472 -0.03181874 -0.002335696 -0.005963248 -0.009304501 -0.01104888\n#> 4 -0.014658242 -0.01759075 -0.001704006 -0.015390412 -0.016571956 -0.01838267\n#>    2018-12-24 2018-12-26  2018-12-27    2018-12-28  2018-12-31   2019-01-02\n#> 1 -0.02366252 0.06254006 0.010954290 -0.0021091840 0.008540171  0.003843006\n#> 2 -0.04288499 0.07139516 0.003921202 -0.0097765403 0.006628301  0.019069103\n#> 3 -0.03925786 0.02519597 0.005720476  0.0005493469 0.003374524 -0.017623973\n#> 4 -0.02226213 0.04534322 0.008903106 -0.0019643956 0.009390790  0.002999051\n#>     2019-01-03 2019-01-04  2019-01-07  2019-01-08   2019-01-09  2019-01-10\n#> 1 -0.042207626 0.04949310 0.021900070 0.011169862  0.017527869 0.006892676\n#> 2 -0.007154041 0.04511775 0.020515467 0.011879849  0.021232497 0.007079545\n#> 3  0.003428785 0.01352601 0.002960760 0.014579573 -0.004437992 0.014320030\n#> 4 -0.020498572 0.03395158 0.009397651 0.009803304  0.006131962 0.004161268\n#>      2019-01-11    2019-01-14  2019-01-15    2019-01-16  2019-01-17  2019-01-18\n#> 1 -0.0000643815 -1.263161e-02 0.016148265 -0.0003493891 0.009778713 0.018933426\n#> 2 -0.0044939986 -5.779135e-05 0.004220701  0.0005469789 0.013001543 0.020885746\n#> 3  0.0006439650 -7.487770e-03 0.011233657  0.0018849468 0.005550432 0.005066536\n#> 4  0.0019697839 -2.211265e-03 0.004755527  0.0034638122 0.009621661 0.016372572\n#>     2019-01-22    2019-01-23   2019-01-24    2019-01-25   2019-01-28\n#> 1 -0.022274543 -0.0051502604  0.025276525  0.0213786649 -0.011670435\n#> 2 -0.026342440 -0.0139855530  0.002068247  0.0200460247 -0.015255646\n#> 3 -0.003042516  0.0054318391 -0.002902421 -0.0007662691  0.003788257\n#> 4 -0.013525856  0.0008376363  0.002910626  0.0104049820 -0.003409732\n#>     2019-01-29  2019-01-30    2019-01-31   2019-02-01  2019-02-04   2019-02-05\n#> 1 -0.013352553 0.025220812  0.0100370290  0.008579466 0.006612912  0.007444096\n#> 2  0.006852493 0.020060173 -0.0004307433  0.008515918 0.006715036 -0.001705462\n#> 3  0.004292367 0.007180800  0.0144310699 -0.004675601 0.004866655  0.001337625\n#> 4  0.003457064 0.007812059  0.0051356841  0.002655385 0.004837957  0.004876282\n#>      2019-02-06   2019-02-07    2019-02-08  2019-02-11    2019-02-12\n#> 1  0.0011515879 -0.016007614  0.0108905276 0.002164051  0.0187379927\n#> 2 -0.0072253794 -0.032870943 -0.0073106553 0.009675432  0.0109777684\n#> 3 -0.0032362265  0.005879985  0.0041796637 0.001155150 -0.0007469276\n#> 4 -0.0007242068 -0.005505920  0.0003808557 0.002443940  0.0144575364\n#>    2019-02-13    2019-02-14  2019-02-15\n#> 1 0.002882583  0.0008287979 0.003344893\n#> 2 0.018636127  0.0069304497 0.016988955\n#> 3 0.001301848 -0.0018576514 0.006505341\n#> 4 0.003986743 -0.0036341950 0.013290681\n#> \n#> Clustering vector:\n#>   [1] 4 1 4 1 4 4 1 4 4 1 1 4 4 4 1 3 3 3 4 4 4 3 4 4 1 4 1 4 4 4 1 1 1 4 4 4 4\n#>  [38] 3 1 1 1 4 4 4 2 2 4 4 4 3 4 3 1 3 1 4 3 4 4 4 4 4 4 4 4 4 4 2 4 4 4 4 4 4\n#>  [75] 4 4 4 3 4 3 4 4 4 4 4 4 3 1 4 4 4 4 4 3 4 4 4 4 3 3 4 4 4 4 4 3 4 3 4 4 4\n#> [112] 2 4 4 3 4 4 1 1 4 4 4 4 4 4 2 2 3 4 4 4 4 4 4 4 4 4 4 4 3 4 4 3 4 3 3 4 2\n#> [149] 4 4 1 4 4 3 4 3 4 4 4 2 3 3 3 3 4 4 3 3 1 3 4 4 3 4 2 4 1 4 2 4 3 1 4 4 4\n#> [186] 4 4 2 4 4 4 4 4 4 3 2 1 4 4 4 4 3 4 4 1 1 4 1 4 4 4 4 4 2 4 4 4 4 3 4 2 2\n#> [223] 4 4 4 4 4 4 2 1 4 4 3 4 4 4 3 4 4 4 1 4 1 1 4 1 1 4 4 1 4 4 3 1 4 4 4 4 4\n#> [260] 4 4 4 4 4 4 4 3 4 1 3 3 1 3 2 4 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 4 1 4 3 4\n#> [297] 4 1 3 3 4 4 1 3 1 4 4 3 4 4 1 4 3 4 4 4 4 3 4 2 4 2 4 1 1 4 4 4 1 1 4 2 4\n#> [334] 4 3 4 1 3 4 1 4 4 2 3 4 1 4 4 1 4 4 4 3 2 4 4 4 2 4 4 4 3 3 4 4 3 4 4 4 4\n#> [371] 4 3 3 4 4 3 4 3 4 4 3 2 4 4 2 1 4 1 4 4 3 4 4 1 4 4 4 4 4 4 4 4 4 4 3 4 4\n#> [408] 4 4 4 3 2 3 4 1 3 3 4 3 4 4 1 4 4 1 4 4 1 3 4 3 4 4 4 4 4 4 4 4 4 1 4 4 4\n#> [445] 3 1 1 1 1 4 1 1 4 3 4 4 4 4 4 4 1 4 4 1 4 4 4 2 4 3 4 1 1 3 3 4 4 4 1 3 3\n#> [482] 4 4 4 3 2 4 4 4 3 1 2 3 1 2 4 4 4 4 4 4 4\n#> \n#> Within cluster sum of squares by cluster:\n#> [1]  7.009809  1.588895  2.554867 18.051976\n#>  (between_SS / total_SS =  13.1 %)\n#> \n#> Available components:\n#> \n#> [1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n#> [6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"\n\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss\n\ntot_withinss <- glance(kmeans_obj)$tot.withinss\n\ntot_withinss\n\n#> [1] 29.20555"
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Machine Learning Fundamentals",
    "section": "\n5.4 Step 4 - Find the optimal value of K",
    "text": "5.4 Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n\n# Use purrr to map\n\nk_means_mapped_tbl <- tibble(centers = 1:30) %>%\n  mutate(k_means = map(centers, ~kmeans_mapper(.)),\n         glance = map(k_means, ~glance(.)))\n\nk_means_mapped_tbl\n\n\n\n  \n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\n\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\n\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\n\nunnested_tbl <- unnest(k_means_mapped_tbl, glance)\n\n# Create the Scree Plot\nscree_plot <- ggplot(unnested_tbl, aes(x = centers, y = tot.withinss)) +\n  geom_point() +\n  geom_line() +\n  labs(title = \"Scree Plot\") +\n  theme_bw()\n\n# Print the Scree Plot\nprint(scree_plot)\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Machine Learning Fundamentals",
    "section": "\n5.5 Step 5 - Apply UMAP",
    "text": "5.5 Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"../../assets/DataSets/k_means_mapped_tbl.rds\")\n\nk_means_mapped_tbl\n\n\n\n  \n\n\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\n\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n\n# Apply UMAP\n\nstock_date_matrix_no_symbol <- stock_date_matrix_tbl %>%\n  select(-symbol)\n\n# Apply the umap() function\numap_results <- umap(stock_date_matrix_no_symbol)\n\numap_results \n\n#> umap embedding of 502 items in 2 dimensions\n#> object components: layout, data, knn, config\n\n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\n\nConvert from a matrix data type to a tibble with as_tibble()\n\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\numap_layout_tbl <- as_tibble(umap_results$layout)\n\n#> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n#> `.name_repair` is omitted as of tibble 2.0.0.\n#> ℹ Using compatibility `.name_repair`.\n\n# Bind the columns of umap_layout_tbl with the 'symbol' column\numap_results_tbl <- bind_cols(stock_date_matrix_tbl$symbol, umap_layout_tbl)\n\n#> New names:\n#> • `` -> `...1`\n\numap_results_tbl\n\n\n\n  \n\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\n\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\numap_plot <- umap_results_tbl %>%\n  ggplot(aes(x = V1, y = V2)) +\n  geom_point(alpha = 0.5) +\n  labs(title = \"UMAP Projection\") +\n  theme_tq()\n\n# Print the UMAP plot\nprint(umap_plot)\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Machine Learning Fundamentals",
    "section": "\n5.6 Step 6 - Combine K-Means and UMAP",
    "text": "5.6 Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"../../assets/DataSets/k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"../../assets/DataSets/umap_results_tbl.rds\")\n\numap_results_tbl\n\n\n\n  \n\n\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\nk_means_obj <- k_means_mapped_tbl$k_means[[10]]\n\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\n\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\n\nk_means_augmented <- k_means_obj %>%\n  augment(stock_date_matrix_tbl)\n\n# Select 'symbol' and '.cluster' columns\nk_means_selected <- k_means_augmented %>%\n  select(symbol, .cluster)\n\n# Left join with umap_results_tbl by 'symbol' column\njoined_tbl <- left_join(umap_results_tbl, k_means_selected, by = \"symbol\")\n\n# Left join with sp_500_index_tbl by 'symbol' column\numap_kmeans_results_tbl <- left_join(joined_tbl, sp_500_index_tbl %>% select(symbol, company, sector), by = \"symbol\")\n\n\numap_kmeans_results_tbl \n\n\n\n  \n\n\n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\n\nUse ggplot() mapping V1, V2 and color = .cluster\n\nAdd the geom_point() geometry with alpha = 0.5\n\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n\nplot_kmeans_umap <- ggplot(umap_kmeans_results_tbl, aes(x = V1, y = V2, color = factor(.cluster))) +\n  geom_point(alpha = 0.5) +\n  scale_color_manual(values = palette_light() %>% rep(3)) +\n  labs(title = \"K-Means and UMAP Results\") +\n  theme_bw()\n\n# Print the plot\nprint(plot_kmeans_umap)\n\n\n\n\n\n\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/Regression.html",
    "href": "content/01_journal/Regression.html",
    "title": "Regression",
    "section": "",
    "text": "1 Libraries\n\nlibrary(recipes)\n\n#> Loading required package: dplyr\n\n\n#> \n#> Attaching package: 'dplyr'\n\n\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n\n\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\n\n\n#> \n#> Attaching package: 'recipes'\n\n\n#> The following object is masked from 'package:stats':\n#> \n#>     step\n\nlibrary(parsnip)\nlibrary(yardstick)\nlibrary(tidymodels)\n\n#> ── Attaching packages ────────────────────────────────────── tidymodels 1.1.0 ──\n\n\n#> ✔ broom        1.0.4     ✔ rsample      1.1.1\n#> ✔ dials        1.2.0     ✔ tibble       3.2.1\n#> ✔ ggplot2      3.4.2     ✔ tidyr        1.3.0\n#> ✔ infer        1.0.4     ✔ tune         1.1.1\n#> ✔ modeldata    1.1.0     ✔ workflows    1.1.3\n#> ✔ purrr        1.0.1     ✔ workflowsets 1.0.1\n\n\n#> ── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n#> ✖ purrr::discard() masks scales::discard()\n#> ✖ dplyr::filter()  masks stats::filter()\n#> ✖ dplyr::lag()     masks stats::lag()\n#> ✖ recipes::step()  masks stats::step()\n#> • Use tidymodels_prefer() to resolve common conflicts.\n\n\n\n2 Data set\n\nbike_orderlines_tbl <- readRDS(\"./../../assets/DataSets/bike_orderlines.rds\")\n\n\n3 Split the data into training and testing sets\n\nset.seed(123)  # For reproducibility\nbikes_split <- initial_split(bike_orderlines_tbl, prop = 0.8)\nbikes_train <- training(bikes_split)\nbikes_test <- testing(bikes_split)\n\n\n4 Create a model\n\nset.seed(1234)\nmodel_07_boost_tree_xgboost <- boost_tree(\n  mode = \"regression\",\n  mtry = 30,\n  learn_rate = 0.25,\n  tree_depth = 7\n) %>%\n  set_engine(\"xgboost\")\n\n\n5 Create a recipe\n\nbikes_recipe <- recipe(price ~ ., data = bikes_train) %>%\n  step_rm(order_id, order_line, order_date, url, location, lat, lng) %>%\n  step_dummy(all_nominal(), -all_outcomes()) %>%\n  prep()\n\n\n6 Create workflow\n\nbikes_wflow <- \n  workflow() %>% \n  add_model(model_07_boost_tree_xgboost) %>% \n  add_recipe(bikes_recipe)\n\nbikes_wflow\n\n#> ══ Workflow ════════════════════════════════════════════════════════════════════\n#> Preprocessor: Recipe\n#> Model: boost_tree()\n#> \n#> ── Preprocessor ────────────────────────────────────────────────────────────────\n#> 2 Recipe Steps\n#> \n#> • step_rm()\n#> • step_dummy()\n#> \n#> ── Model ───────────────────────────────────────────────────────────────────────\n#> Boosted Tree Model Specification (regression)\n#> \n#> Main Arguments:\n#>   mtry = 30\n#>   tree_depth = 7\n#>   learn_rate = 0.25\n#> \n#> Computational engine: xgboost\n\n\n\n7 Fit\n\nbikes_fit <- \n  bikes_wflow %>% \n  fit(data = bikes_train)\n\n\n8 Predict\n\npredictions <- predict(bikes_fit, bikes_test)\n\npredictions"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  }
]